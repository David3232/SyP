package claves;

// Actividad realizada por Eugenio Domenech y Joan Moya

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class decodificar {

   public static void main(String[] args) throws IOException {
       String texto;
       int codigo;
       
       
       do { 
           texto = "Js%zs%qzlfw%ij%qf%Rfshmf1%ij%hz~t%strgwj%st%vznjwt%fhtwifwrj1%st%mf%rzhmt%ynjrut%vzj%{n{òf%zs%mnifqlt%ij%qtx%ij%qfsf%js%fxynqqjwt1%fifwlf%fsynlzf1%wthòs%kqfht%~%lfqlt%htwwjitw3%Zsf%tqqf%ij%fqlt%ræx%{fhf%vzj%hfwsjwt1%xfqunhøs%qfx%ræx%sthmjx1%izjqtx%~%vzjgwfsytx%qtx%xægfitx1%qjsyjofx%qtx%{njwsjx1%fqlÿs%ufqtrnst%ij%föfinizwf%qtx%itrnsltx1%htsxzròfs%qfx%ywjx%ufwyjx%ij%xz%mfhnjsif3";
           
         //ahora vamos a ver del texto cifrado cual es el caracter que mas se repite para saber cuantas posiciones hay que restar
         codigo = caracterMasRepetido(texto);
       } while (texto.isEmpty());
       //Introducir el valor del desplazamiento
        while (codigo < 1);
           System.out.println("Texto descifrado: " + descifradoCesar(texto, codigo));
   }
   
   
   
   
   
   //funcion buscar caracter más repetido
   
   public static int caracterMasRepetido(String texto) { 
   
	   char[] characters = texto.toCharArray();

       // build HashMap with character and number of times they appear in String
       Map<Character, Integer> charMap = new HashMap<Character, Integer>();
       for (Character ch : characters) {
           if (charMap.containsKey(ch)) {
               charMap.put(ch, charMap.get(ch) + 1);
           } else {
               charMap.put(ch, 1);
              
           }
       }
       
       // Iterate through HashMap to print all duplicate characters of String
       Set<Map.Entry<Character, Integer>> entrySet = charMap.entrySet();
       
       char keyRepetida;        
       int posicion = 0;
       for (Map.Entry<Character, Integer> entry : entrySet) {
           if (entry.getValue() > 1) {
           	
           	//vams a recorrerlo solo una vez para que solo nos guarde la primera psicion que es el mas repetido
               keyRepetida=entry.getKey();
               System.out.println("El caracter mas repetido es "+keyRepetida+ " suponiendo que el mas repetido es el espacio");
               int asciiValue = (int) keyRepetida;
               System.out.println("Se encuentra en la posicion "+ asciiValue+" de la tabla ascii");
               posicion = asciiValue - 32;
               System.out.println("Restamos la posicion ascii de espacio que es 32 al valor actual de la posicion espacio");
               
               break;
           }
           
       }
  
       return posicion;
 }
   //método para descifrar el texto
   public static String descifradoCesar(String texto, int codigo) {
       StringBuilder cifrado = new StringBuilder();
       codigo = codigo % 26;
       for (int i = 0; i < texto.length(); i++) {
           if (texto.charAt(i) >= 'a' && texto.charAt(i) <= 'z') {
               if ((texto.charAt(i) - codigo) < 'a') {
                   cifrado.append((char) (texto.charAt(i) - codigo + 26));
               } else {
                   cifrado.append((char) (texto.charAt(i) - codigo));
               }
           } else if (texto.charAt(i) >= 'A' && texto.charAt(i) <= 'Z') {
               if ((texto.charAt(i) - codigo) < 'A') {
                   cifrado.append((char) (texto.charAt(i) - codigo + 26));
               } else {
                   cifrado.append((char) (texto.charAt(i) - codigo));
               }
           }
       }
       return cifrado.toString();
   }
}